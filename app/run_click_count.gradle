def versionPropsFile = file('run_click_count.properties')
def versionBuild

/*Setting default value for versionBuild which is the last incremented value stored in the file */
if (versionPropsFile.canRead()) {
    Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    versionBuild = versionProps['VERSION_BUILD'].toInteger()

} else {

    throw new FileNotFoundException("Could not read version.properties!")
}

/*Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk*/
ext.autoIncrementBuildNumber = {

    if (versionPropsFile.canRead()) {

        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1

        versionProps['VERSION_BUILD'] = versionBuild.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

    } else {

        throw new FileNotFoundException("Could not read version.properties!")
    }
}

// Hook to check if the release/debug task is among the tasks to be executed.
//Let's make use of it
gradle.taskGraph.whenReady { taskGraph ->

    if (taskGraph.hasTask(assembleDebug) || taskGraph.hasTask(assembleRelease)) {

        autoIncrementBuildNumber()
    }
}